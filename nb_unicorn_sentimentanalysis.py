# -*- coding: utf-8 -*-
"""MasterFileUnicornSentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B9G2AxT-TtnbfDqISKb8XNSmssCy_5lL
"""

# utilities
import time
import re
import pickle
import numpy as np
import pandas as pd
import nltk
nltk.download('wordnet')

# plotting
import seaborn as sns
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# nltk
from nltk.stem import WordNetLemmatizer

# sklearn
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import LogisticRegression
import sklearn.metrics as metrics
import xgboost as xgb
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix, classification_report

# Importing the df
#columns  = ["sentiment", "ids", "date", "flag", "user", "text"]
#encode = "ISO-8859-1"
df = pd.read_excel('local_dataset.xlsx')


# Removing the unnecessary columns.
df = df[['sentiment','text']]
# Replacing the values to ease understanding.
df['sentiment'] = df['sentiment'].replace(4,1)

# Plotting the distribution for df.
ax = df.groupby('sentiment').count().plot(kind='bar', title='Distribution of data',
                                               legend=False)
# Assuming you have two categories (Negative and Positive)
num_categories = 2

# Set the tick locations
ax.set_xticks(range(num_categories))

ax.set_xticklabels(['Negative','Positive'], rotation=0)

# Storing data in lists.
text, sentiment = list(df['text']), list(df['sentiment'])

# Defining dictionary containing all emojis with their meanings.
emojis = {':)': 'smile', ':-)': 'smile', ';d': 'wink', ':-E': 'vampire', ':(': 'sad',
          ':-(': 'sad', ':-<': 'sad', ':P': 'raspberry', ':O': 'surprised',
          ':-@': 'shocked', ':@': 'shocked',':-$': 'confused', ':\\': 'annoyed',
          ':#': 'mute', ':X': 'mute', ':^)': 'smile', ':-&': 'confused', '$_$': 'greedy',
          '@@': 'eyeroll', ':-!': 'confused', ':-D': 'smile', ':-0': 'yell', 'O.o': 'confused',
          '<(-_-)>': 'robot', 'd[-_-]b': 'dj', ":'-)": 'sadsmile', ';)': 'wink',
          ';-)': 'wink', 'O:-)': 'angel','O*-)': 'angel','(:-D': 'gossip', '=^.^=': 'cat'}

## Defining set containing all stopwords in english.
stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',
             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',
             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',
             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',
             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',
             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',
             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',
             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',
             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're',
             's', 'same', 'she', "shes", 'should', "shouldve",'so', 'some', 'such',
             't', 'than', 'that', "thatll", 'the', 'their', 'theirs', 'them',
             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',
             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',
             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',
             'why', 'will', 'with', 'won', 'y', 'you', "youd","youll", "youre",
             "youve", 'your', 'yours', 'yourself', 'yourselves', 'USER']

def preprocess(textdata):
    processedText = []

    # Create Lemmatizer and Stemmer.
    wordLemm = WordNetLemmatizer()

    # Defining regex patterns.
    urlPattern = r"((http://)[^ ]*|(https://)[^ ]*|( www\.)[^ ]*)"
    userPattern = '@[^\s]+'
    alphaPattern = "[^a-zA-Z0-9]"
    sequencePattern = r"(.)\1\1+"
    seqReplacePattern = r"\1\1"

    for tweet in textdata:
        #if isinstance(tweet, float):  # Check if the element is a float
         #   continue  # Skip processing if it's a float

        tweet = str(tweet)  # Convert to string to handle other data types
        tweet = tweet.lower()

        # Replace all URLs with 'URL'
        tweet = re.sub(urlPattern, ' URL', tweet)
        # Replace all emojis.
        for emoji in emojis.keys():
            tweet = tweet.replace(emoji, "EMOJI" + emojis[emoji])
        # Replace all non-alphabets.
        tweet = re.sub(alphaPattern, " ", tweet)
        # Replace 3 or more consecutive letters by 2 letters.
        tweet = re.sub(sequencePattern, seqReplacePattern, tweet)

        tweetwords = ''
        for word in tweet.split():
            # Checking if the word is a stopword.
            # if word not in stopwordlist:
            if len(word) > 1:
                # Lemmatizing the word.
                word = wordLemm.lemmatize(word)
                tweetwords += (word + ' ')

        processedText.append(tweetwords)

    return processedText

import time
t = time.time()
processedtext = preprocess(text)
print(f'Text Preprocessing complete.')
print(f'Time Taken: {round(time.time()-t)} seconds')

# Add a new column 'processed_text' to the df

df['processed_text'] = processedtext

df.drop('text', axis = 1)

t = time.time()
data_pos = processedtext[266667:]
wc = WordCloud(max_words = 1000 ,
               width = 1600 ,
               height = 800,
               background_color = 'white',
               colormap = 'viridis',
               collocations=False).generate(" ".join(data_pos))
plt.figure(figsize = (20,20))
plt.imshow(wc)
wc.to_file('Positive Tweets Word Cloud.png')

print(f'Positive Word Cloud Generated.')
print(f'Time Taken: {round(time.time()-t)} seconds')

t = time.time()
data_neg = processedtext[:266667]
plt.figure(figsize = (20,20))
wc = WordCloud(max_words = 1000 ,
               width = 1600 ,
               height = 800,
               background_color = 'white',
               colormap = 'magma',
               collocations=False).generate(" ".join(data_neg))
plt.imshow(wc)
wc.to_file('Negative Tweets Word Cloud.png')

print(f'Negative Word Cloud Generated.')
print(f'Time Taken: {round(time.time()-t)} seconds')

# Labelling df
X = df['processed_text']
y = df['sentiment']

t = time.time()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, shuffle=True)

#TF-IDF
tfidf_vectorizer = TfidfVectorizer(use_idf=True)
X_train_vectors_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_vectors_tfidf = tfidf_vectorizer.transform(X_test)

print(f'TF-IDF Vectorization Complete.')
print(f'Time Taken: {round(time.time()-t)} seconds')


t = time.time()
#build the classifier model - Multinomial Naive Bayes with tfidf
naive_bayes_model = MultinomialNB()
model_NB = naive_bayes_model.fit(X_train_vectors_tfidf, y_train)
nb_predicted = model_NB.predict(X_test_vectors_tfidf)

print(classification_report(y_test, nb_predicted))
conf_matrix = confusion_matrix(y_test, nb_predicted)
print("Confusion Matrix: \n", conf_matrix)


# Plot and save the confusion matrix as a PNG with annotations and distinct styling
plt.figure(figsize=(8, 6))
plt.imshow(conf_matrix, interpolation='nearest', cmap=plt.cm.Blues, vmin=0, vmax=np.max(conf_matrix) + 1)
plt.title('Naive Bayes Confusion Matrix', fontsize=16)
plt.colorbar()

classes = sorted(set(y_test))
tick_marks = np.arange(len(classes))
plt.xticks(tick_marks, classes, rotation=45, fontsize=12)
plt.yticks(tick_marks, classes, fontsize=12)

plt.xlabel('Predicted Label', fontsize=14)
plt.ylabel('True Label', fontsize=14)

# Add numerical values to the plot with distinct coloring
for i in range(len(classes)):
    for j in range(len(classes)):
        plt.text(j, i, str(conf_matrix[i, j]), ha='center', va='center', color='white' if conf_matrix[i, j] > np.max(conf_matrix) / 2 else 'black', fontsize=12)

plt.tight_layout()

# Save the confusion matrix as a PNG file
plt.savefig('Naive Bayes Confusion Matrix.png', bbox_inches='tight')

print(f'\nNaive Bayes Model Fitting and Prediction Complete.')
print(f'Time Taken: {round(time.time()-t)} seconds')
